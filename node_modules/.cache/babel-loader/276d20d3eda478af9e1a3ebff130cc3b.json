{"ast":null,"code":"var _jsxFileName = \"/Users/lesliegonzalez/Development/traveler-frontend/src/components/NewTripForm.js\";\nimport React from 'react'; // 1.  We first grab the action creator\n\nimport { updateNewTripForm } from '../actions/newTripForm';\nimport { createTrip } from '../actions/myTrips';\nimport { connect } from 'react-redux'; // 3.  This means Redux gives us back a prop called updateTripForm\n// which when invoked, Redux will now dispatch\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTripForm = _ref => {\n  let {\n    formData,\n    history,\n    updateNewTripForm,\n    createTrip,\n    userId\n  } = _ref;\n  const {\n    name,\n    startDate,\n    endDate\n  } = formData;\n\n  const handleChange = event => {\n    console.log(\"trigger Handle change\");\n    const {\n      name,\n      value\n    } = event.target; // 4.  This is not an invocation of just the action creator,\n    // it's now Redux dispatching the action built by the action\n    // creator with the appropriate arguments\n\n    updateNewTripForm(name, value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    createTrip({ ...FormData,\n      userId\n    }, history); // formData: {\n    //   name: \"\"\n    //   startDate: \"\"\n    //   endDate: \"\"\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"name\",\n      name: \"name\",\n      onChange: handleChange,\n      value: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"start date\",\n      name: \"startDate\",\n      onChange: handleChange,\n      value: startDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"end date\",\n      name: \"endDate\",\n      onChange: handleChange,\n      value: endDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\" // value={editMode ? \"Update Trip\" : \"Create Trip\" }\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewTripForm;\n\nconst mapStateToProps = state => {\n  const userId = state.currentUser ? state.currentUser.id : \"\";\n  return {\n    formData: state.newTripForm,\n    userId\n  };\n}; // 2.  We pass the action creator to redux's connect function\n// using either mapDispatchToProps or the shorthand object syntax seen below.\n\n\nexport default connect(mapStateToProps, {\n  updateNewTripForm,\n  createTrip\n})(NewTripForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTripForm\");","map":{"version":3,"sources":["/Users/lesliegonzalez/Development/traveler-frontend/src/components/NewTripForm.js"],"names":["React","updateNewTripForm","createTrip","connect","NewTripForm","formData","history","userId","name","startDate","endDate","handleChange","event","console","log","value","target","handleSubmit","preventDefault","FormData","mapStateToProps","state","currentUser","id","newTripForm"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAIA;AACA;;;;AACA,MAAMC,WAAW,GAAG,QAEd;AAAA,MAFe;AACnBC,IAAAA,QADmB;AACTC,IAAAA,OADS;AACAL,IAAAA,iBADA;AACmBC,IAAAA,UADnB;AAC+BK,IAAAA;AAD/B,GAEf;AAEJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAA+BL,QAArC;;AAEA,QAAMM,YAAY,GAAGC,KAAK,IAAI;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAM;AAAEN,MAAAA,IAAF;AAAQO,MAAAA;AAAR,QAAkBH,KAAK,CAACI,MAA9B,CAF4B,CAG5B;AACA;AACA;;AACAf,IAAAA,iBAAiB,CAACO,IAAD,EAAOO,KAAP,CAAjB;AACD,GAPD;;AASA,QAAME,YAAY,GAAGL,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACM,cAAN;AACAhB,IAAAA,UAAU,CAAC,EACT,GAAGiB,QADM;AAETZ,MAAAA;AAFS,KAAD,EAGPD,OAHO,CAAV,CAF4B,CAO5B;AACA;AACA;AACA;AACA;AACD,GAZD;;AAcA,sBACE;AAAM,IAAA,QAAQ,EAAEW,YAAhB;AAAA,4BACE;AACE,MAAA,WAAW,EAAC,MADd;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAEN,YAHZ;AAIE,MAAA,KAAK,EAAEH;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,eAMI;AAAA;AAAA;AAAA;AAAA,YANJ,eAOE;AACE,MAAA,WAAW,EAAC,YADd;AAEE,MAAA,IAAI,EAAC,WAFP;AAGE,MAAA,QAAQ,EAAEG,YAHZ;AAIE,MAAA,KAAK,EAAEF;AAJT;AAAA;AAAA;AAAA;AAAA,YAPF,eAYI;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaE;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,QAAQ,EAAEE,YAHZ;AAIE,MAAA,KAAK,EAAED;AAJT;AAAA;AAAA;AAAA;AAAA,YAbF,eAkBI;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAmBE;AACE,MAAA,IAAI,EAAC,QADP,CAEE;;AAFF;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBA,CAtDF;;KAAMN,W;;AAwDN,MAAMgB,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAMd,MAAM,GAAGc,KAAK,CAACC,WAAN,GAAoBD,KAAK,CAACC,WAAN,CAAkBC,EAAtC,GAA2C,EAA1D;AACA,SAAO;AACLlB,IAAAA,QAAQ,EAAEgB,KAAK,CAACG,WADX;AAELjB,IAAAA;AAFK,GAAP;AAID,CAND,C,CAQA;AACA;;;AACA,eAAeJ,OAAO,CAACiB,eAAD,EAAkB;AAAEnB,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAlB,CAAP,CAA4DE,WAA5D,CAAf","sourcesContent":["import React from 'react';\n// 1.  We first grab the action creator\nimport { updateNewTripForm } from '../actions/newTripForm'\nimport { createTrip } from '../actions/myTrips'\nimport { connect } from 'react-redux'\n\n\n\n// 3.  This means Redux gives us back a prop called updateTripForm\n// which when invoked, Redux will now dispatch\nconst NewTripForm = ({ \n  formData, history, updateNewTripForm, createTrip, userId \n}) => {\n\n  const { name, startDate, endDate } = formData\n\n  const handleChange = event => {\n    console.log(\"trigger Handle change\")\n    const { name, value } = event.target\n    // 4.  This is not an invocation of just the action creator,\n    // it's now Redux dispatching the action built by the action\n    // creator with the appropriate arguments\n    updateNewTripForm(name, value)\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    createTrip({\n      ...FormData,\n      userId\n    }, history)\n\n    // formData: {\n    //   name: \"\"\n    //   startDate: \"\"\n    //   endDate: \"\"\n    // }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        placeholder=\"name\"\n        name=\"name\"\n        onChange={handleChange}\n        value={name}\n      /><br/>\n      <input\n        placeholder=\"start date\"\n        name=\"startDate\"\n        onChange={handleChange}\n        value={startDate}\n      /><br/>\n      <input\n        placeholder=\"end date\"\n        name=\"endDate\"\n        onChange={handleChange}\n        value={endDate}\n      /><br/>\n      <input\n        type=\"submit\"\n        // value={editMode ? \"Update Trip\" : \"Create Trip\" }\n      />\n    </form>\n)};\n\nconst mapStateToProps = state => {\n  const userId = state.currentUser ? state.currentUser.id : \"\"\n  return {\n    formData: state.newTripForm,\n    userId\n  }\n}\n\n// 2.  We pass the action creator to redux's connect function\n// using either mapDispatchToProps or the shorthand object syntax seen below.\nexport default connect(mapStateToProps, { updateNewTripForm, createTrip })(NewTripForm);"]},"metadata":{},"sourceType":"module"}