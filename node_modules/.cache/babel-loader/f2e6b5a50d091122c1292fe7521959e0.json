{"ast":null,"code":"var _jsxFileName = \"/Users/lesliegonzalez/Development/traveler-frontend/src/components/NewTripForm.js\";\nimport React from 'react'; // 1.  We first grab the action creator\n\nimport { updateNewTripForm } from '../actions/newTripForm';\nimport { connect } from 'react-redux'; // 3.  This means Redux gives us back a prop called updateTripForm\n// which when invoked, Redux will now dispatch\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTripForm = _ref => {\n  let {} = _ref;\n  const {\n    name,\n    startDate,\n    endDate\n  } = formData;\n\n  const handleChange = event => {\n    event.preventDefault();\n    const {\n      name,\n      value\n    } = event.target; // 4.  This is not an invocation of just the action creator,\n    // it's now Redux dispatching the action built by the action\n    // creator with the appropriate arguments\n\n    updateNewTripForm(name, value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      handleSubmit(formData);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"name\",\n      name: \"name\",\n      onChange: handleChange,\n      value: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"start date\",\n      name: \"startDate\",\n      onChange: handleChange,\n      value: startDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"end date\",\n      name: \"endDate\",\n      onChange: handleChange,\n      value: endDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: editMode ? \"Update Trip\" : \"Create Trip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewTripForm;\n\nconst mapStateToProps = state => {\n  return {\n    formData: state.tripForm,\n    userId\n  };\n}; // 2.  We pass the action creator to redux's connect function\n// using either mapDispatchToProps or the shorthand object syntax seen below.\n\n\nexport default NewTripForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTripForm\");","map":{"version":3,"sources":["/Users/lesliegonzalez/Development/traveler-frontend/src/components/NewTripForm.js"],"names":["React","updateNewTripForm","connect","NewTripForm","name","startDate","endDate","formData","handleChange","event","preventDefault","value","target","handleSubmit","editMode","mapStateToProps","state","tripForm","userId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAIA;AACA;;;;AACA,MAAMC,WAAW,GAAG,QAAQ;AAAA,MAAP,EAAO;AAE1B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAA+BC,QAArC;;AAEA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM;AAAEN,MAAAA,IAAF;AAAQO,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B,CAF4B,CAG5B;AACA;AACA;;AACAX,IAAAA,iBAAiB,CAACG,IAAD,EAAOO,KAAP,CAAjB;AACD,GAPD;;AASA,sBACE;AAAM,IAAA,QAAQ,EAAEF,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACC,cAAN;AACAG,MAAAA,YAAY,CAACN,QAAD,CAAZ;AACD,KAHD;AAAA,4BAIE;AACE,MAAA,WAAW,EAAC,MADd;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAEC,YAHZ;AAIE,MAAA,KAAK,EAAE;AAJT;AAAA;AAAA;AAAA;AAAA,YAJF,eASI;AAAA;AAAA;AAAA;AAAA,YATJ,eAUE;AACE,MAAA,WAAW,EAAC,YADd;AAEE,MAAA,IAAI,EAAC,WAFP;AAGE,MAAA,QAAQ,EAAEA,YAHZ;AAIE,MAAA,KAAK,EAAEH;AAJT;AAAA;AAAA;AAAA;AAAA,YAVF,eAeI;AAAA;AAAA;AAAA;AAAA,YAfJ,eAgBE;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,QAAQ,EAAEG,YAHZ;AAIE,MAAA,KAAK,EAAEF;AAJT;AAAA;AAAA;AAAA;AAAA,YAhBF,eAqBI;AAAA;AAAA;AAAA;AAAA,YArBJ,eAsBE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAEQ,QAAQ,GAAG,aAAH,GAAmB;AAFpC;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BA,CAzCF;;KAAMX,W;;AA2CN,MAAMY,eAAe,GAAGC,KAAK,IAAI;AAE/B,SAAO;AACLT,IAAAA,QAAQ,EAAES,KAAK,CAACC,QADX;AAELC,IAAAA;AAFK,GAAP;AAID,CAND,C,CAQA;AACA;;;AACA,eAAef,WAAf","sourcesContent":["import React from 'react';\n// 1.  We first grab the action creator\nimport { updateNewTripForm } from '../actions/newTripForm'\nimport { connect } from 'react-redux'\n\n\n\n// 3.  This means Redux gives us back a prop called updateTripForm\n// which when invoked, Redux will now dispatch\nconst NewTripForm = ({}) => {\n\n  const { name, startDate, endDate } = formData\n\n  const handleChange = event => {\n    event.preventDefault()\n    const { name, value } = event.target\n    // 4.  This is not an invocation of just the action creator,\n    // it's now Redux dispatching the action built by the action\n    // creator with the appropriate arguments\n    updateNewTripForm(name, value)\n  }\n\n  return (\n    <form onSubmit={event => {\n      event.preventDefault()\n      handleSubmit(formData)\n    }}>\n      <input\n        placeholder=\"name\"\n        name=\"name\"\n        onChange={handleChange}\n        value={\"\"}\n      /><br/>\n      <input\n        placeholder=\"start date\"\n        name=\"startDate\"\n        onChange={handleChange}\n        value={startDate}\n      /><br/>\n      <input\n        placeholder=\"end date\"\n        name=\"endDate\"\n        onChange={handleChange}\n        value={endDate}\n      /><br/>\n      <input\n        type=\"submit\"\n        value={editMode ? \"Update Trip\" : \"Create Trip\" }\n      />\n    </form>\n)};\n\nconst mapStateToProps = state => {\n\n  return {\n    formData: state.tripForm,\n    userId\n  }\n}\n\n// 2.  We pass the action creator to redux's connect function\n// using either mapDispatchToProps or the shorthand object syntax seen below.\nexport default NewTripForm;"]},"metadata":{},"sourceType":"module"}